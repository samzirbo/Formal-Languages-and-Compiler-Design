%{
#include <math.h> 
#include <stdio.h>
#include "y.tab.h"
#include <string.h>

%}
%option noyywrap

INT     0|[-]?[1-9][0-9]*
STR     [\"][a-z]+[\"]
ID      [a-z][a-z0-9]*

%%

{INT}       {printf("Constant: %s\n", yytext); return CONST;}
{STR}       {printf("Constant: %s\n", yytext); return CONST;}

"int"    {printf("Reserved word: %s\n", yytext); return INT;}
"str"    {printf("Reserved word: %s\n", yytext); return STR;}
"list"   {printf("Reserved word: %s\n", yytext); return LIST;}
"of"     {printf("Reserved word: %s\n", yytext); return OF;}
"if"     {printf("Reserved word: %s\n", yytext); return IF;}
"then"   {printf("Reserved word: %s\n", yytext); return THEN;}
"else"   {printf("Reserved word: %s\n", yytext); return ELSE;}
"while"  {printf("Reserved word: %s\n", yytext); return WHILE;}
"for"    {printf("Reserved word: %s\n", yytext); return FOR;}
"in"     {printf("Reserved word: %s\n", yytext); return IN;}
"not"    {printf("Reserved word: %s\n", yytext); return NOT;}
"do"     {printf("Reserved word: %s\n", yytext); return DO;}
"end"    {printf("Reserved word: %s\n", yytext); return END;}
"and"    {printf("Reserved word: %s\n", yytext); return AND;}
"or"     {printf("Reserved word: %s\n", yytext); return OR;}

"+"     {printf("Operator: %s\n", yytext); return PLUS;}
"-"     {printf("Operator: %s\n", yytext); return MINUS;}
"*"     {printf("Operator: %s\n", yytext); return MULTIPLY;}
"/"     {printf("Operator: %s\n", yytext); return DIVISION;}
"%"     {printf("Operator: %s\n", yytext); return MODULO;}
"="     {printf("Operator: %s\n", yytext); return EQUAL;}
"<"     {printf("Operator: %s\n", yytext); return LESS_THAN;}
"<="    {printf("Operator: %s\n", yytext); return LESS_OR_EQUAL_THAN;}
">"     {printf("Operator: %s\n", yytext); return GREATER_THAN;}
">="    {printf("Operator: %s\n", yytext); return GREATER_OR_EQUAL_THAN;}
"=="    {printf("Operator: %s\n", yytext); return DOUBLE_EQUAL;}
"!="    {printf("Operator: %s\n", yytext); return NOT_EQUAL;}
"<<"    {printf("Operator: %s\n", yytext); return SHIFT_LEFT;}
">>"    {printf("Operator: %s\n", yytext); return SHIFT_RIGHT;}

"("     {printf("Separator: %s\n", yytext); return LEFT_ROUND_PARENTHESIS;}
")"     {printf("Separator: %s\n", yytext); return RIGHT_ROUND_PARENTHESIS;}
"."     {printf("Separator: %s\n", yytext); return DOT;}
","     {printf("Separator: %s\n", yytext); return COMMA;}
":"     {printf("Separator: %s\n", yytext); return COLON;}
"{"     {printf("Separator: %s\n", yytext); return LEFT_CURLY_BRACE;}
"}"     {printf("Separator: %s\n", yytext); return RIGHT_CURLY_BRACE;}
"["     {printf("Separator: %s\n", yytext); return LEFT_SQUARE_BRACKET;}
"]"     {printf("Separator: %s\n", yytext); return RIGHT_SQUARE_BRACKET;}

{ID}        {printf("Identifier: %s\n", yytext); return ID;}

[ \t\n]+	    {}

. {printf("Lexical Error: \"%s\"\n", yytext); return -1;}

%% 